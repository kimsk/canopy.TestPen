@using Microsoft.FSharp.Collections
<div class="content">
    <div id="pad-wrapper" class="less-padding">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="panel-title">Stories
                    </h4>
                </div>
                <div class="panel-collapsed">
                    <div class="panel-body no-padding-bottom">
@*                        <div class="row">
                            <div class="col-md-12">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="col-md-1">Story
                                            </th>
                                            <th class="col-md-5">
                                                <span class="line"></span>Description
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>
                                                <button type="button" class="btn btn-xs btn-danger "><i class="icon-remove"></i></button>
                                                <span class="story">DEFI-123</span>
                                            </td>
                                            <td>Pricing Matrix change not updating cache
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <button type="button" class="btn btn-xs btn-danger "><i class="icon-remove"></i></button>
                                                <span class="story">DEFI-123</span>
                                            </td>
                                            <td>Integrate with Daybreak - US Auto
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <button type="button" class="btn btn-xs btn-danger "><i class="icon-remove"></i></button>
                                                <span class="story">DEFI-123</span>
                                            </td>
                                            <td>Add Reference fields to Megasys Legacy - AFS (SOW Signed)
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>*@

                        <div class="row">
                            <div class="col-md-3 chart">
                                <h5>Total</h5>
                                <div id="hero-donut" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>High</h5>
                                <div id="hero-donut2" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>Medium</h5>
                                <div id="hero-donut3" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>Low</h5>
                                <div id="hero-donut4" style="height: 250px;"></div>
                            </div>
                        </div>
                        <hr/>
                        <div class="row">
                            <div class="col-md-12 chart">
                                <h5>Scenarios Ran Over Time</h5>
                                <div id="scenarios-ran-over-time"></div>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-md-3 chart">
                                <h5>Total</h5>
                                <div id="by-person-total" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>High</h5>
                                <div id="by-person-high" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>Medium</h5>
                                <div id="by-person-medium" style="height: 250px;"></div>
                            </div>
                            <div class="col-md-3 chart">
                                <h5>Low</h5>
                                <div id="by-person-low" style="height: 250px;"></div>
                            </div>
                        </div>
                        <hr/>
                        <div class="row">
                            <div class="col-md-12 chart">
                                <h5>Scenarios Ran By Tester</h5>
                                <div id="scenarios-ran-over-time-by-tester"></div>
                            </div>
                        </div>

                        <hr/>
                        <div class="row">
                            
                            <div class="col-md-12">
                                <h5>Failed</h5>
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th class="col-md-1">Tested By
                                            </th>
                                            <th class="col-md-1">Criticality
                                            </th>
                                            <th class="col-md-1"><span class="line"></span>Area
                                            </th>
                                            <th class="col-md-1"><span class="line"></span>Page
                                            </th>
                                            <th class="col-md-2"><span class="line"></span>Section
                                            </th>
                                            <th class="col-md-3">
                                                <span class="line"></span>Description
                                            </th>
                                            <th class="col-md-4">
                                                <span class="line"></span>Comment
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                       @if (ListModule.IsEmpty(ViewBag.ReadinessErrors))
                                       {
                                           <tr class="tr-red-transparent">
                                               <td>None
                                               </td>
                                               <td>
                                               </td>
                                               <td>
                                               </td>
                                               <td>
                                               </td>
                                               <td></td>
                                               <td></td>
                                               <td></td>
                                           </tr>
                                       }
                                       else
                                       {
                                           foreach (var error in ViewBag.ReadinessErrors)
                                           {
                                                <tr class="tr-red-transparent">
                                                    <td>
                                                    @if (error.TestedBy != null)
                                                    {
                                                        <span>@error.TestedBy.Value</span>
                                                    }
                                                    </td>
                                                    <td>@error.Criticality
                                                    </td>
                                                    <td>@error.Area
                                                    </td>
                                                    <td>@error.Section
                                                    </td>
                                                    <td>@error.Name
                                                    </td>
                                                    <td>@error.Description
                                                    </td>
                                                    <td>@error.Comment
                                                    </td>
                                                </tr>
  
                                           }
                                       }
                                        
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script>
        $(document).ready(function () {

        });
    </script>

<script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
<script src="../../js/morris.min.js"></script>

<script type="text/javascript">

    // Morris Donut Chart
    Morris.Donut({
        element: 'hero-donut',
        data: [
            { label: 'Passed', value: @ViewBag.TotalPass, percent : @ViewBag.TotalPassPercent },
            { label: 'Failed', value: @ViewBag.TotalFail, percent : @ViewBag.TotalFailPercent },
            { label: 'Skipped', value: @ViewBag.TotalSkip, percent : @ViewBag.TotalSkipPercent },
            { label: 'None', value: @ViewBag.TotalNone, percent : @ViewBag.TotalNonePercent }
        ],
        colors: ["#47a447", "#d2322d", "#f0ad4e", "#DDDDDD"],
        resize : true,
        formatter : function (y, data) { return y + ' (' + data.percent + '%)'; }
    });

    Morris.Donut({
        element: 'hero-donut2',
        data: [
            { label: 'Passed', value: @ViewBag.HighPass, percent : @ViewBag.HighPassPercent },
            { label: 'Failed', value: @ViewBag.HighFail, percent : @ViewBag.HighFailPercent },
            { label: 'Skipped', value: @ViewBag.HighSkip, percent : @ViewBag.HighSkipPercent },
            { label: 'None', value: @ViewBag.HighNone, percent : @ViewBag.HighNonePercent }
        ],
        colors: ["#47a447", "#d2322d", "#f0ad4e", "#DDDDDD"],
        resize : true,
        formatter : function (y, data) { return y + ' (' + data.percent + '%)'; }
    });

    Morris.Donut({
        element: 'hero-donut3',
        data: [
            { label: 'Passed', value: @ViewBag.MediumPass, percent : @ViewBag.MediumPassPercent },
            { label: 'Failed', value: @ViewBag.MediumFail, percent : @ViewBag.MediumFailPercent },
            { label: 'Skipped', value: @ViewBag.MediumSkip, percent : @ViewBag.MediumSkipPercent },
            { label: 'None', value: @ViewBag.MediumNone, percent : @ViewBag.MediumNonePercent }
        ],
        colors: ["#47a447", "#d2322d", "#f0ad4e", "#DDDDDD"],
        resize : true,
        formatter : function (y, data) { return y + ' (' + data.percent + '%)'; }
    });

    Morris.Donut({
        element: 'hero-donut4',
        data: [
            { label: 'Passed', value: @ViewBag.LowPass, percent : @ViewBag.LowPassPercent },
            { label: 'Failed', value: @ViewBag.LowFail, percent : @ViewBag.LowFailPercent },
            { label: 'Skipped', value: @ViewBag.LowSkip, percent : @ViewBag.LowSkipPercent },
            { label: 'None', value: @ViewBag.LowNone, percent : @ViewBag.LowNonePercent }
        ],
        colors: ["#47a447", "#d2322d", "#f0ad4e", "#DDDDDD"],
        resize : true,
        formatter : function (y, data) { return y + ' (' + data.percent + '%)'; }
    });

    var datas = @Html.Raw(ViewBag.ReadinessRanData);
    Morris.Line({
        element: 'scenarios-ran-over-time',
        data: datas,
        xkey: 'Date',
        ykeys: ['Total', 'High', 'Medium', 'Low'],
        labels: ['Total', 'High', 'Medium', 'Low'],
        resize : true
    });

    //convert from list of people and their counts to object with all people and counts for morris js
    var datas = @Html.Raw(ViewBag.ReadinessRanByUserByDay);
    var testers = _.uniq(_.map(datas, function(data) { return data.TestedBy; }));
    var dates = _.uniq(_.map(datas, function(data) { return data.Date; }));
    var datas = _.map(dates, function(date) {
        var temp = { Date : date };
        _.each(testers, function(tester) {
            var temp2 = _.find(datas, function(data) { return data.Date === date && data.TestedBy === tester }) || { "Count" : 0 };
            temp[tester] = temp2.Count;
        });
        return temp;
    });
    Morris.Line({
        element: 'scenarios-ran-over-time-by-tester',
        data: datas,
        xkey: 'Date',
        ykeys: testers,
        labels: testers,
        resize : true,
        xLabels : "day"
    });

    //by person by T/H/M/L
    var datas = @Html.Raw(ViewBag.ReadinessByUserByDayByCriticality);
    var testers = _.uniq(_.map(datas, function(data) { return data.TestedBy; }));
    var totals = _.map(testers, function(tester) {
        var temp = _.filter(datas, function(data) { return data.TestedBy === tester; });
        var counts = _.map(temp, function(data) { return data.Count; });
        var count = _.reduce(counts, function(memo, num){ return memo + num; }, 0);
        return  { label : tester, value : count };
    });
    totals = _.filter(totals, function (data) { return typeof(data) !== 'undefined';} );
    Morris.Donut({
        element: 'by-person-total',
        data: totals,
        resize : true
    });

    var highs = _.map(testers, function(tester) {
        var temp = _.find(datas, function(data) { return data.Criticality === "High" && data.TestedBy === tester; });
        if (typeof(temp) !== 'undefined'){
            return  { label : tester, value : temp.Count };
        };
    });
    highs = _.filter(highs, function (data) { return typeof(data) !== 'undefined';} );
    Morris.Donut({
        element: 'by-person-high',
        data: highs,
        resize : true
    });

    var mediums = _.map(testers, function(tester) {
        var temp = _.find(datas, function(data) { return data.Criticality === "Medium" && data.TestedBy === tester; });
        if (typeof(temp) !== 'undefined'){
            return  { label : tester, value : temp.Count };
        }
    });
    mediums = _.filter(mediums, function (data) { return typeof(data) !== 'undefined';} );
    Morris.Donut({
        element: 'by-person-medium',
        data: mediums,
        resize : true
    });

    var lows = _.map(testers, function(tester) {
        var temp = _.find(datas, function(data) { return data.Criticality === "Low" && data.TestedBy === tester; });
        if (typeof(temp) !== 'undefined'){
            return  { label : tester, value : temp.Count };
        }
    });
    lows = _.filter(lows, function (data) { return typeof(data) !== 'undefined';} );
    Morris.Donut({
        element: 'by-person-low',
        data: lows,
        resize : true
    });

</script>
}